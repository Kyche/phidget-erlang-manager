"""
scons build file

PEM

@author: Jean-Lou Dupont
"""
import os
import shutil

try:
	from pyjld.os import recursive_chmod, safe_copytree
except:
	print "*** Missing package: use easy_install pyjld.os"
	exit(1)

from helpers import *


Help("""\
   'scons' to build the libraries (release and debug),
   'scons deb' to build the .deb package
   'scons docs' to build the documentation
   'scons rel' to release the package to tags/debian repository
   'scons install' to install on local machine
   'scons installlib' to install the libraries on local machine
""")

# LIST MODULES
# ============
includes = ['#pem',]

list_modules = [	'#pem/common',
					'#pem/drv_mng',
					'#pem/drv_ifk',
				]


modules = []
for module in list_modules:
	modules.append( {	'script'  : "%s/SConscript" % module,
						'build'   : module,
						'release' : Environment(CPPPATH=[module+'/include']+includes),
						'debug'   : Environment(CPPPATH=[module+'/include']+includes, CPPFLAGS="-D_DEBUG -g", _DEBUG='1')
					} )

for module in modules:
	SConscript(module['script'], build_dir=module['build']+'/release', exports={'env':module['release']})
	SConscript(module['script'], build_dir=module['build']+'/debug',   exports={'env':module['debug']})


	
# BUILDING .deb PACKAGE
# =====================
if 'deb' in COMMAND_LINE_TARGETS:
	print "Preparing .deb package"
	try:
		version = read_version()
		print """scons: building release [%s]""" % version
		
		print """scons: cloning release library""" 
		shutil.copy('./lib/release/lib%s.so' % this_lib, "./packages/debian/usr/lib/lib%s-%s.so" % (this_lib,version) )
		
		print """scons: cloning debug library"""
		shutil.copy('./lib/debug/lib%s_debug.so' % this_lib, './packages/debian/usr/lib/lib%s_debug-%s.so' % (this_lib,version) )
		
		print """scons: cloning header file(s) & adjusting version"""
		for hdr in headers:
			frag =  hdr % this_lib
			spath = "./lib/include/%s" % frag
			dpath = "./packages/debian/usr/include/%s" % frag
			shutil.copy(spath, dpath)
			replace_params(dpath, dpath, {'version':version} )
		
		print """scons: removing directory"""
		shutil.rmtree('/tmp/%s_deb' % this_lib, ignore_errors=True)

		#print """scons: updating debian 'control' with version[%s]""" % version
		#generate_control(version)
		
		print """scons: cloning ./packages/debian to /tmp directory"""
		safe_copytree('./packages/debian', '/tmp/%s_deb' % this_lib, skip_dirs=['.svn',], dir_mode=0775, make_dirs=True)

		print """scons: adjusting version in control files"""
		c_path = '/tmp/%s_deb/DEBIAN' % this_lib
		params = {'version':version}
		adjust_control_files(params, c_path)
		

		#print """scons: cloning 'Packages.gz'"""
		#shutil.copy("../dists/stable/main/binary-i386/Packages.gz", "/tmp/%s_deb/Packages.gz" % this_lib)
		
		print """scons: adjusting permissions for `dkpg-deb` command-line"""
		recursive_chmod("/tmp/%s_deb" % this_lib, mode=0775)


	except Exception,e:
		print "*** ERROR [%s] ***" % e
	
env.Command("deb", "/tmp/%s_deb" % this_lib, "dpkg-deb --build $SOURCE")
	